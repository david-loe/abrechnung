<!doctype html>
<html lang="<%= language %>">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg" href="https://icons.getbootstrap.com/assets/icons/receipt.svg" />
    <title>Upload</title>
    <style>
      .text > * {
        font-size: 2rem;
      }
      #button {
        border-radius: 0.5rem;
        background-color: rgba(100, 149, 237, 0.2);
        border-color: rgba(100, 149, 237, 0.35);
        border-width: 0.2rem;
        padding: 0.5rem;
      }
      #progress {
        background-color: rgb(100, 149, 237);
        animation-name: shrink;
        animation-duration: <%= secondsLeft %>s;
        animation-timing-function: linear;
        height: 1vh;
        border-radius: 3px;
        width: 0%;
      }
      @keyframes shrink {
        from {
          width: <%= Math.round((secondsLeft * 100) / expireAfterSeconds) %>%;
        }
        to {
          width: 0%;
        }
      }
    </style>
  </head>

  <body style="font-family: Helvetica, Arial, sans-serif">
    <div style="width: 100%; border-radius: 3px; background-color: gainsboro">
      <div id="progress"></div>
    </div>
    <div style="height: 25vh"></div>
    <div class="text" style="width: 100%; text-align: center">
      <div id="text"></div>
      <button id="button" role="button"><%= text.tapToUpload %></button>
      <form id="form" style="display: none">
        <input type="file" id="upload" accept="image/png, image/jpeg, .pdf" multiple />
      </form>
    </div>
    <script type="module">
        <%- fileUtilsContent %>

        document.getElementById('button').onclick = (event) => {
          document.getElementById('upload').click()
        }

      let fileInput = document.getElementById('upload')

      const t = (key, interpolation) => {
        let str = ''
        if (key === 'alerts.fileXToLargeMaxIsY') { str = "<%- text.fileXToLargeMaxIsY %>" }
        if (key === 'alerts.fileTypeOfXNotSupportedY') { str = "<%- text.fileTypeOfXNotSupportedY %>" }
        for (const entry in interpolation) {
          str = str.replaceAll(entry, interpolation[entry])
        }
        return str
      }

      fileInput.addEventListener('change', async function (event) {
        const files = await fileEventToDocumentFiles(event, <%= maxFileSizeInBytes %>, <%= imageCompressionThresholdInPx %>, t)
        if (files && files.length > 0) {
          document.getElementById('progress').remove()
          document.getElementById('button').remove()
          document.getElementById('text').innerHTML = '<%= text.uploading %>'
          const FD = new FormData()
          for (let i = 0; i < files.length; i++) {
            for (const [name, value] of Object.entries(files[i])) FD.append('files[' + i + '][' + name + ']', value)
          }
          const response = await fetch('<%- url %>', {
            method: 'POST',
            body: FD
          })
          if (response.ok) {
            document.getElementById('text').innerHTML = '<%= text.success %>'
          } else {
            document.getElementById('text').innerHTML = '<%= text.error %>'
          }
        }
      })
    </script>
  </body>
</html>
